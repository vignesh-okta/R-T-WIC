name: "Terraform Deploy Config"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      OKTA_ORG_NAME: ${{ vars.OKTA_ORG_NAME }}
      OKTA_BASE_URL: ${{ vars.OKTA_BASE_URL }}
      TF_VAR_OKTA_ORG_NAME: ${{ vars.OKTA_ORG_NAME }}
      TF_VAR_OKTA_BASE_URL: ${{ vars.OKTA_BASE_URL }}
      OKTA_BRAND_ID: ${{ vars.OKTA_BRAND_ID }}
      TF_VAR_OKTA_BRAND_ID: ${{ vars.OKTA_BRAND_ID }}
      OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
      TF_VAR_OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main

      # Checkout the Terraform modules repository to the GitHub Actions runner
      - name: Checkout Terraform Repo
        uses: actions/checkout@v3
        with:
          repository: vignesh-okta/R-T-Modules
          path: SFDC_TBID_TF
          ssh-key: ${{ secrets.GIT_SSH_KEY }}

      - name: Merge files
        run: mkdir workingDir && rm -rf main/.git && mv main/* workingDir && mv SFDC_TBID_TF/* workingDir && cd workingDir && ls -l

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Install jq
      - name: Run jq
        uses: sergeysova/jq-action@v2.3.0

      # Checks that all Terraform configuration files adhere to a canonical format
      # - name: Terraform Format
      #   id: fmt
      #   working-directory: ./workingDir
      #   run: terraform fmt -check

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        working-directory: ./workingDir
        run: terraform init

      # Validate Terraform
      - name: Terraform Validate
        id: validate
        working-directory: ./workingDir
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        working-directory: ./workingDir
        run: terraform plan -no-color -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        continue-on-error: true
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./workingDir
        run: terraform apply -auto-approve -input=false -parallelism=1

      # This ensures that the priorities of the policies are aligned as configured
      - name: Terraform Reapply
        if: steps.apply.outcome == 'failure'
        working-directory: ./workingDir
        run: terraform apply -auto-approve -input=false -parallelism=1

      # - name: Terraform Destroy
      #   id: destroy
      #   working-directory: ./workingDir
      #   run: terraform destroy -auto-approve
